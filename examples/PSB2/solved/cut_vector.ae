type List;

def itertools : Unit = native_import "itertools";

def Range: (start : Int) -> (end : Int) -> (step : Int) -> List = \start -> \end -> \step -> native "list(range(start, end, step ))";

def List_slice : (i:List) -> (j:Int) -> (l:Int)-> List = \i -> \j -> \l -> native "i[j:l]" ;
def List_remove_last : (i:List) -> List = \i -> native "i[:-1]";
def List_remove_first : (i:List) -> List = \i -> native "i[1:]";
def List_reversed: (l: List)-> List = \xs -> native "xs[::-1]";

def List_length: (l:List) -> Int = \list -> native "len(list)";
def List_new : List = native "[]" ;
def List_append: (l:List) -> (i: Int) -> List = \xs -> \x -> native "xs + [x]";

def Accumulate : (xs:List) -> List = \xs -> native "list(itertools.accumulate(xs))";
def Zip : (xs:List) -> (ys:List) -> List = \xs -> \ys -> native "list(zip(xs, ys))";
def Enumerate : (xs:List) -> List = \xs -> native "list(enumerate(xs))";
def Map : (f: (s:List) -> List) -> (l:List) -> List = \f -> \xs -> native "list(map(f, xs))";
def Math_abs : (i:Int) -> Int = \i -> native "abs(i)" ;
def Tuple : (i:Int) -> (j:Int) -> List = \i -> \j -> native "(i, j)";
def Tuple_list : (i:List) -> (j:List) -> List = \i -> \j -> native "(i, j)";
def min_list : (i:List) -> (key: (xs:List) -> Int) -> List = \i -> \f -> native "min(i,key=f)";

def get_fst : (i:List) -> Int = \i -> native "i[0]";
def get_snd : (i:List) -> Int = \i -> native "i[1]";
def get_zip : (i:List) -> List = \i -> native "i[1]";

def cut_vector ( ls : List ) : List {
    if (List_length ls == 1) then
        Tuple_list ls List_new
    else
    inits: List = Accumulate (List_remove_last ls);
    tails: List = List_remove_first (List_reversed (Accumulate (List_reversed ls)));
    mapper : (s:List) -> List = \x -> Tuple
                        (Math_abs ((get_fst (get_zip x)) - (get_snd (get_zip x))))
                        (get_fst x);
    diffs: List = Map mapper (Enumerate (Zip inits tails));
    cut_position: Int = get_snd (min_list diffs ((\xs -> get_fst xs):(xs:List) -> Int));

    vec1: List = List_slice ls 0 (cut_position +1);
    vec2: List = List_slice ls (cut_position +1) (List_length ls);

    Tuple_list vec1 vec2
}

def main (args:Int) : Unit {
    vec: List = List_append (List_append List_new 1) 2;
    #vec: List = Range 0 10 1;
    print(cut_vector vec)

}
