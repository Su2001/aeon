type List;
type Map;

def List_size: (l:List) -> Int = uninterpreted;
def List_length: (l:List) -> Int = \list -> native "len(list)";
def List_new : {x:List | List_size x == 0} = native "[]" ;
def List_append (l:List) (i: Int) : {l2:List | List_size l2 == List_size l + 1} { native "l + [i]" }



def List_sum: (l:List) -> Int = \xs -> native "sum(xs)";
def Math_max : (i:Int) -> (j:Int) -> Int = \i -> \j -> native "max(i,j)" ;
def Math_floor_division : (i:Int) -> (j:Int)-> Int = \i -> \j -> native "i // j" ;

def List_map_Int_Int_Int_List: (function: (a: Int) -> (b: Int) -> Int) ->
                               (l: List) ->
                               (l2: List) ->
                               List =
    \f -> \xs -> \ys -> native "list(map(lambda x, y: f(x)(y), xs, ys))";

def shopping  (prices: List) (discounts: List) : Int {
    f: (x:Int) -> (y:Int) -> Int = \x -> \y -> x * (1 - y / 100);
    l: List = List_map_Int_Int_Int_List f prices discounts;
    List_sum l

 }

def main (args:Int) : Unit {
    l1: List = List_append (List_append List_new 50) 0;
    l2: List = List_append (List_append List_new 10) 0;
    print (shopping l1 l2)
}
