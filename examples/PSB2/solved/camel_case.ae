type List;

def String_split : (s:String) -> (sep:String) -> List = \s -> \sep -> native "s.split(sep)";
def String_concat : (i:String) -> (j:String) -> String = \i -> \j -> native "i + j";

def Map_string_string : (f: (s:String) -> String) -> (l:String) -> List = \f -> \xs -> native "list(map(f, xs))";
def Map_string_list : (f: (s:String) -> String) -> (l:List) -> List = \f -> \xs -> native "list(map(f, xs))";
def Map_list_list : (f: (s:String) -> List) -> (l:List) -> List = \f -> \xs -> native "list(map(f, xs))";

def String_join : (l:List) -> (s:String) -> String = \l -> \s -> native "s.join(l)";
def String_tail:(l:String) -> String = \xs -> native "xs[1:]";
def String_capitalize : (s:String) -> String = \s -> native "s.capitalize()";
def String_get : (s:String) -> (i:Int) -> String = \s -> \i -> native "s[i]";
def String_tail:(l:String) -> String = \xs -> native "xs[1:]";


def camel_case (s:String) : String {
    groups: List = String_split s " ";

    camel_case_groups : List = (Map_string_list
        ((\group ->  (String_concat
                           (String_get group 0)
                           (String_join
                                  (Map_string_string ((\x-> String_capitalize x):(s:String) -> String) (String_tail group))
                                  ""
                           )
                     )
         ) : (s:String) -> String)
        (Map_list_list ((\g -> (String_split g "-")):(s:String) -> List) groups)
    );
    result : String = String_join camel_case_groups " ";
    result
}


def main (args:Int) : Unit {
    print(camel_case "two-words")
}
