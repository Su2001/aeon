type List;

def get_fst: (l:String) -> String = \xs -> native "xs[0]";
def get_snd: (l:String) -> String = \xs -> native "xs[1]";

def String_len : (i:String) -> Int = \i -> native "len(i)";
def String_slice : (i:String) -> (j:Int) -> (l:Int)-> String = \i -> \j -> \l -> native "i[j:l]" ;
def String_zip : (i:String) -> (j:String) -> String = \i -> \j -> native "zip(i,j)";
def String_to_List : (i:String) -> List = \i -> native "list(i)";
def String_to_Int : (i:String) -> Int = \i -> native "int(i)";

def filter :  (f: (s:String) -> Bool) -> (l:List) -> List = \f -> \xs -> native "[x for x in xs if f(x)]";
# def filter2 :  (f: (s:String) -> Bool) -> (l:List) -> List = \f -> \xs -> native "filter(f, xs)";

def List_sum: (l:List) -> Int = \xs -> native "sum(xs)";
def List_map_String_Int: (function:(a: String) -> Int) -> (l: List) -> List = \f -> \xs -> native "map(f, xs)";

def paired_digits (nums: String) : Int {
    pairs: List = String_to_List (String_zip (nums) (String_slice nums 1 (String_len nums)));
    pred : (x:String) -> Bool = \x -> (get_fst x) == (get_snd x);
    matching_pairs : List = filter pred pairs;
    mapper : (x: String) -> Int = \x -> String_to_Int (get_fst x);
    total_sum : Int = List_sum (List_map_String_Int mapper matching_pairs);
    total_sum
 }

def main (args:Int) : Unit {
    print (paired_digits "99")
}
