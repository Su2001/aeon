type List;

def math : Unit = native_import "math";
def Math_sqrt_Float : (i:Float) -> Float = \i -> native "math.sqrt(i)" ;
def Math_pow : (i:Int) -> (j:Int) -> Int = \i -> \j -> native "i ** j";
def Math_pow_Float : (i:Float) -> (j:Float) -> Float = \i -> \j -> native "i ** j";

def Map_Float_Float_Float_List_List: (function: (a: Float) -> (b: Float) -> Float) ->
                               (l: List) ->
                               (l2: List) ->
                               List =
    \f -> \xs -> \ys -> native "list(map(lambda x, y: f(x)(y), xs, ys))";

def List_sum_Float : (l:List) -> Float = \xs -> native "sum(xs)";

def List_size: (l:List) -> Int = uninterpreted;

def List_new : {x:List | List_size x == 0} = native "[]" ;

def List_append_float (l:List) (i: Float) : {l2:List | List_size l2 == List_size l + 1} { native "l + [i]"}





def vector_distance  (vector1: List) (vector2: List) : Float {
    mapper : (x:Float) -> (y:Float) -> Float = \x -> \y ->  Math_pow_Float (x - y) 2.0;
    squared_diffs: List = Map_Float_Float_Float_List_List mapper vector1 vector2;
    distance = Math_sqrt_Float (List_sum_Float squared_diffs);
    distance
 }

def main (args:Int) : Unit {
    v1: List = List_append_float List_new 42.91283;
    v2: List = List_append_float List_new (-22.134);
    print(vector_distance v1 v2)
}
